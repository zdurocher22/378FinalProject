app = VetiverAPI(v,check_prototype = True)
app.run(port = 8080)
quit
quit
library(palmerpenguins)
library(dplyr)
library(dbplyr)
library(ggplot2)
library(duckdb)
library(vctrs)
library(DBI)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins,overwrite = TRUE)
reticulate::repl_python()
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.register('df',df)
# con.execute('CREATE TABLE penguins AS SELECT * FROM df')  # this creates the penguins table, but it's already there
con.close()
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.register('df',df)
# con.execute('CREATE TABLE penguins AS SELECT * FROM df')  # this creates the penguins table, but it's already there
con.close()
reticulate::repl_python()
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.register('df',df)
# con.execute('CREATE TABLE penguins AS SELECT * FROM df')  # this creates the penguins table, but it's already there
con.close()
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
import pins
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b,v,'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
app = VetiverAPI(v,check_prototype = True)
app.run(port = 8080)
reticulate::repl_python()
app = VetiverAPI(v,check_prototype = True)
renv::snapshot()
shiny::runApp('NewAppPenguins')
reticulate::repl_python()
app = VetiverAPI(v,check_prototype = True)
app.run(port = 8080)
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.register('df',df)
# con.execute('CREATE TABLE penguins AS SELECT * FROM df')  # this creates the penguins table, but it's already there
con.close()
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
import pins
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b,v,'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
app = VetiverAPI(v,check_prototype = True)
app.run(port = 8080)
quit
runApp('NewAppPenguins')
runApp('NewAppPenguins')
reticulate::repl_python()
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.register('df',df)
# con.execute('CREATE TABLE penguins AS SELECT * FROM df')  # this creates the penguins table, but it's already there
con.close()
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
import vetiver
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
from vetiver import prepare_docker
import pins
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b,v,'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
app = VetiverAPI(v,check_prototype = True)
#app.run(port = 8080)
vetiver.prepare_docker(b, "penguin_model")
app = VetiverAPI(v,check_prototype = True)
vetiver.prepare_docker(b, "penguin_model")
vetiver.prepare_docker(b, "penguin_model")
vetiver.prepare_docker(b, "penguin_model")
vetiver.prepare_docker(b, "penguin_model")
vetiver.prepare_docker(b, "penguin_model")
vetiver.prepare_docker(b, "penguin_model")
vetiver.prepare_docker(b, "penguin_model")
app.run(port = 8080)
quit
shiny::runApp('NewAppPenguins')
reticulate::repl_python()
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.register('df',df)
# con.execute('CREATE TABLE penguins AS SELECT * FROM df')  # this creates the penguins table, but it's already there
con.close()
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
import vetiver
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
from vetiver import prepare_docker
import pins
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b,v,'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
app = VetiverAPI(v,check_prototype = True)
#app.run(port = 8080)
vetiver.prepare_docker(b, "penguin_model")
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
View(v)
import vetiver
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
from vetiver import prepare_docker
import pins
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b,v,'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
app = VetiverAPI(v,check_prototype = True)
vetiver.prepare_docker(b, "penguin_model")
vetiver.prepare_docker(b, "penguin_model")
app = VetiverAPI(v,check_prototype = True)
#app.run(port = 8080)
vetiver.prepare_docker(b, "penguin_model", version="20240304T112148Z-a6f9b")
app = VetiverAPI(v,check_prototype = True)
#app.run(port = 8080)
vetiver.prepare_docker(b, "penguin_model", version="20240304T112148Z-a6f9b")
import vetiver
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
from vetiver import prepare_docker
import pins
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b,v,'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
app = VetiverAPI(v,check_prototype = True)
#app.run(port = 8080)
vetiver.prepare_docker(b, "penguin_model", version="20240304T112148Z-a6f9b")
import vetiver
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
from vetiver import prepare_docker
import pins
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
v.description
View(r)
View(v)
View(v)
b = pins.board_folder('data/model/penguin_model', allow_pickle_read=True)
vetiver_pin_write(b,v,'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
import os
app = VetiverAPI(v,check_prototype = True)
#app.run(port = 8080)
os.remove("Dockerfile")
os.remove("app.py)
vetiver.prepare_docker(b, "penguin_model", version="20240304T112148Z-a6f9b")
import os
app = VetiverAPI(v,check_prototype = True)
#app.run(port = 8080)
os.remove("Dockerfile")
os.remove("app.py")
vetiver.prepare_docker(b, "penguin_model", version="20240304T112148Z-a6f9b")
b = pins.board_folder('data/model/penguin_model', allow_pickle_read=True)
vetiver_pin_write(b,v,'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
import os
app = VetiverAPI(v,check_prototype = True)
#app.run(port = 8080)
vetiver.prepare_docker(b, "penguin_model", version="20240304T112148Z-a6f9b")
b = pins.board_folder('data/model/', allow_pickle_read=True)
vetiver_pin_write(b,v,'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
v.description
b = pins.board_folder('data/model/', allow_pickle_read=True)
vetiver_pin_write(b,v,'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
b = pins.board_folder('data/model', allow_pickle_read=True)
vetiver_pin_write(b,v,'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
b = pins.board_folder('data/model/penguin_model', allow_pickle_read=True)
vetiver_pin_write(b,v,'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
import os
app = VetiverAPI(v,check_prototype = True)
#app.run(port = 8080)
vetiver.prepare_docker(b, "penguin_model", version="20240304T112148Z-a6f9b")
import os
app = VetiverAPI(v,check_prototype = True)
#app.run(port = 8080)
vetiver.prepare_docker(b, "penguin_model", version="20240304T112148Z-a6f9b")
b = pins.board_folder('data/model/penguin_model/', allow_pickle_read=True)
vetiver_pin_write(b,v,'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
import os
app = VetiverAPI(v,check_prototype = True)
#app.run(port = 8080)
vetiver.prepare_docker(b, "penguin_model", version="20240307T173715Z-70f14")
import os
app = VetiverAPI(v,check_prototype = True)
#app.run(port = 8080)
vetiver.prepare_docker(b, "penguin_model", version="20240307T173715Z-70f14")
reticulate::repl_python()
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.register('df',df)
# con.execute('CREATE TABLE penguins AS SELECT * FROM df')  # this creates the penguins table, but it's already there
con.close()
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
import vetiver
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
from vetiver import prepare_docker
import pins
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
v.description
b = pins.board_folder('data/model/penguin_model/', allow_pickle_read=True)
vetiver_pin_write(b,v,'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
import os
app = VetiverAPI(v,check_prototype = True)
#app.run(port = 8080)
vetiver.prepare_docker(b, "penguin_model", version="20240307T173715Z-70f14")
app.run(port = 8080)
reticulate::repl_python()
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.register('df',df)
# con.execute('CREATE TABLE penguins AS SELECT * FROM df')  # this creates the penguins table, but it's already there
con.close()
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
import vetiver
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
from vetiver import prepare_docker
import pins
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
v.description
b = pins.board_folder('data/model/penguin_model/', allow_pickle_read=True)
vetiver_pin_write(b,v,'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
app = VetiverAPI(v,check_prototype = True)
app.run(port = 8080)
reticulate::repl_python()
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.register('df',df)
# con.execute('CREATE TABLE penguins AS SELECT * FROM df')  # this creates the penguins table, but it's already there
con.close()
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
import vetiver
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
from vetiver import prepare_docker
import pins
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
v.description
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/', allow_pickle_read=True)
vetiver_pin_write(b,v,'penguin_model')
v = VetiverModel.from_pin(b, 'penguin_model')
b = pins.board_folder('data/model/', allow_pickle_read=True)
vetiver_pin_write(b,v,'penguin_model')
b = pins.board_folder('data/model/', allow_pickle_read=True)
vetiver_pin_write(b,v)
import os
app = VetiverAPI(v,check_prototype = True)
app.run(port = 8080)
vetiver.prepare_docker(b, "penguin_model", version="20240307T173715Z-70f14")
import os
app = VetiverAPI(v,check_prototype = True)
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/', allow_pickle_read=True)
vetiver_pin_write(b,v)
b = pins.board_folder('data/model/', allow_pickle_read=True)
vetiver_pin_write(b,v)
b = pins.board_folder('data/model/', allow_pickle_read=True)
vetiver_pin_write(b,v)
b = pins.board_folder('data/model/', allow_pickle_read=True)
vetiver_pin_write(b,v)
b = pins.board_folder('data/model/', allow_pickle_read=True)
vetiver_pin_write(b,v)
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/', allow_pickle_read=True)
vetiver_pin_write(b,v)
import os
app = VetiverAPI(v,check_prototype = True)
# app.run(port = 8080)
# vetiver.prepare_docker(b, "penguin_model", version="20240307T173715Z-70f14")
import os
app = VetiverAPI(v,check_prototype = True)
# app.run(port = 8080)
# vetiver.prepare_docker(b, "penguin_model", version="20240307T173715Z-70f14")
vetiver.prepare_docker(b, "penguin_model", version="20240307T173715Z-70f14")
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.register('df',df)
# con.execute('CREATE TABLE penguins AS SELECT * FROM df')  # this creates the penguins table, but it's already there
con.close()
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
import vetiver
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
from vetiver import prepare_docker
import pins
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/', allow_pickle_read=True)
vetiver_pin_write(b,v)
import os
app = VetiverAPI(v,check_prototype = True)
# app.run(port = 8080)
vetiver.prepare_docker(b, "penguin_model", version="20240307T173715Z-70f14")
import os
app = VetiverAPI(v,check_prototype = True)
# app.run(port = 8080)
vetiver.prepare_docker(b, "penguin_model")
vetiver.prepare_docker(b, "penguin_model")
vetiver.prepare_docker(b, "penguin_model")
import os
app = VetiverAPI(v,check_prototype = True)
# app.run(port = 8080)
vetiver.prepare_docker(b, "penguin_model")
reticulate::repl_python()
View(r)
View(r)
reticulate::repl_python()
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
import duckdb
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
con = duckdb.connect('my-db.duckdb')
df = penguins.load_penguins()
con.register('df',df)
# con.execute('CREATE TABLE penguins AS SELECT * FROM df')  # this creates the penguins table, but it's already there
con.close()
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
import vetiver
from vetiver import vetiver_pin_write
from vetiver import VetiverAPI
from vetiver import prepare_docker
import pins
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
b = pins.board_folder('data/model/', allow_pickle_read=True)
vetiver_pin_write(b,v)
import os
app = VetiverAPI(v,check_prototype = True)
app.run(port = 8080)
vetiver.prepare_docker(b, "penguin_model")
import os
app = VetiverAPI(v,check_prototype = True)
vetiver.prepare_docker(b, "penguin_model")
vetiver.prepare_docker(b, "penguin_model")
vetiver.prepare_docker(b, "penguin_model")
quit
shiny::runApp('NewAppPenguins')
shiny::runApp('NewAppPenguins')
shiny::runApp('NewAppPenguins')
renv::snapshot()
runApp('NewAppPenguins')
shiny::runApp('NewAppPenguins')
